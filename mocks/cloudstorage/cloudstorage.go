// Code generated by MockGen. DO NOT EDIT.
// Source: cloudstorage/cloudstorage.go

// Package mock_cloudstorage is a generated GoMock package.
package mock_cloudstorage

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	cloudstorage "github.com/Dert12318/Utilities/cloudstorage"
)

// MockCloudStorage is a mock of CloudStorage interface.
type MockCloudStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCloudStorageMockRecorder
}

// MockCloudStorageMockRecorder is the mock recorder for MockCloudStorage.
type MockCloudStorageMockRecorder struct {
	mock *MockCloudStorage
}

// NewMockCloudStorage creates a new mock instance.
func NewMockCloudStorage(ctrl *gomock.Controller) *MockCloudStorage {
	mock := &MockCloudStorage{ctrl: ctrl}
	mock.recorder = &MockCloudStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudStorage) EXPECT() *MockCloudStorageMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockCloudStorage) Download(ctx context.Context, bucketName, fileName string, dst io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, bucketName, fileName, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockCloudStorageMockRecorder) Download(ctx, bucketName, fileName, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockCloudStorage)(nil).Download), ctx, bucketName, fileName, dst)
}

// FGetObject mocks base method.
func (m *MockCloudStorage) FGetObject(ctx context.Context, bucketName, objectName, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FGetObject", ctx, bucketName, objectName, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// FGetObject indicates an expected call of FGetObject.
func (mr *MockCloudStorageMockRecorder) FGetObject(ctx, bucketName, objectName, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FGetObject", reflect.TypeOf((*MockCloudStorage)(nil).FGetObject), ctx, bucketName, objectName, filePath)
}

// GetClient mocks base method.
func (m *MockCloudStorage) GetClient() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockCloudStorageMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockCloudStorage)(nil).GetClient))
}

// GetPreSignedURL mocks base method.
func (m *MockCloudStorage) GetPreSignedURL(ctx context.Context, bucketName, fileName string, expires time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreSignedURL", ctx, bucketName, fileName, expires)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreSignedURL indicates an expected call of GetPreSignedURL.
func (mr *MockCloudStorageMockRecorder) GetPreSignedURL(ctx, bucketName, fileName, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreSignedURL", reflect.TypeOf((*MockCloudStorage)(nil).GetPreSignedURL), ctx, bucketName, fileName, expires)
}

// IsBucketExist mocks base method.
func (m *MockCloudStorage) IsBucketExist(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBucketExist", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBucketExist indicates an expected call of IsBucketExist.
func (mr *MockCloudStorageMockRecorder) IsBucketExist(ctx, bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBucketExist", reflect.TypeOf((*MockCloudStorage)(nil).IsBucketExist), ctx, bucketName)
}

// Upload mocks base method.
func (m *MockCloudStorage) Upload(ctx context.Context, bucketName string, makeNewBucket bool, file cloudstorage.FileOption) (*cloudstorage.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, bucketName, makeNewBucket, file)
	ret0, _ := ret[0].(*cloudstorage.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockCloudStorageMockRecorder) Upload(ctx, bucketName, makeNewBucket, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockCloudStorage)(nil).Upload), ctx, bucketName, makeNewBucket, file)
}
